# ===================================================================
# 		  docker-compose.yml para Backend de NextFactura
# Arquitectura Robusta con Healthchecks y Dependencias Condicionales
# ===================================================================
version: '3.8'

services:

  # --- Base de Datos PostgreSQL con Healthcheck ---
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-net
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Cache con Redis y Healthcheck ---
  redis:
    image: redis:alpine
    restart: always
    networks:
      - app-net
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # --- API Gateway ---
  api-gateway:
    build: ./api-gateway
    restart: on-failure
    env_file: [".env"]
    ports:
      # El único servicio que expone un puerto HTTP/S al Nginx del host.
      - "4000:8080"
    depends_on:
      - auth-service
      - restaurant-service
      - payment-service
      - pos-service
      - pac-service
      - connector-service # Agregamos dependencia al nuevo servicio
    networks:
      - app-net
  
  # --- Microservicios con Dependencias Saludables ---
  auth-service:
    build: ./services/auth-service
    restart: on-failure
    env_file: [".env"]
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - app-net

  restaurant-service:
    build: ./services/restaurant-service
    restart: on-failure
    env_file: [".env"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net
    volumes:
      # Antes apuntaba a /downloads, ahora apunta a la ruta que el código usa.
      - /home/servidor/secure_uploads:/app/secure_uploads

  payment-service:
    build: ./services/payment-service
    restart: on-failure
    env_file: [".env"]
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net

  pos-service:
    build: ./services/pos-service
    restart: on-failure
    env_file: [".env"]
    depends_on:
      postgres:
        condition: service_healthy
      restaurant-service:
        condition: service_started
      # --- CAMBIO CLAVE 2: El pos-service ahora espera al connector-service ---
      connector-service:
        condition: service_started
    networks:
      - app-net
      
  pac-service:
    build: ./services/pac-service
    restart: on-failure
    env_file: [".env"]
    depends_on:
      postgres:
        condition: service_healthy
      restaurant-service:
        condition: service_started
    networks:
      - app-net
      
  # --- CAMBIO CLAVE 1: NUEVO SERVICIO CONECTOR ---
  connector-service:
    build: ./services/connector-service
    restart: on-failure
    env_file: [".env"]
    ports:
      # Puerto público para que los agentes instalados en los restaurantes se conecten.
      - "4006:4006"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-net
      
# --- Definición de la Red y el Volumen ---
volumes:
  postgres_data:
    driver: local

networks:
  app-net:
    driver: bridge