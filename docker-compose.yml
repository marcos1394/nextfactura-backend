# docker-compose.yml (Versión Final Definitiva con Espera Integrada)
services:
  redis:
    image: redis:alpine
    restart: always
    network_mode: host

  postgres:
    image: postgres:15-alpine
    restart: always
    network_mode: host
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
  
  auth-service:
    build: ./services/auth-service
    restart: on-failure
    network_mode: host
    env_file:
      - ./.env
    command: /bin/sh -c "while ! nc -z localhost 5432; do echo 'Auth-Service waiting for DB...' && sleep 1; done; node server.js"

  restaurant-service:
    build: ./services/restaurant-service
    restart: on-failure
    network_mode: host
    env_file:
      - ./.env
    command: /bin/sh -c "while ! nc -z localhost 5432; do echo 'Restaurant-Service waiting for DB...' && sleep 1; done; node server.js"

  payment-service:
    build: ./services/payment-service
    restart: on-failure
    network_mode: host
    env_file:
      - ./.env
    command: /bin/sh -c "while ! nc -z localhost 5432; do echo 'Payment-Service waiting for DB...' && sleep 1; done; node server.js"

  pos-service:
    build: ./services/pos-service
    restart: on-failure
    network_mode: host
    env_file:
      - ./.env
    command: /bin/sh -c "while ! nc -z localhost 5432; do echo 'POS-Service waiting for DB...' && sleep 1; done; node server.js"
      
  pac-service:
    build: ./services/pac-service
    restart: on-failure
    network_mode: host
    env_file:
      - ./.env
    command: /bin/sh -c "while ! nc -z localhost 5432; do echo 'PAC-Service waiting for DB...' && sleep 1; done; node server.js"
      
  api-gateway:
    build: ./api-gateway
    restart: always
    network_mode: host
    env_file:
      - ./.env
    # No necesita esperar a la BD, así que no lleva 'command' especial

volumes:
  postgres_data: