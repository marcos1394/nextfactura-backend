# docker-compose.yml (Versión Completa y Corregida)
services:
  # --- Servicio de Cache para tokens, sesiones, etc. ---
  redis:
    image: redis:alpine
    restart: always
    hostname: redis
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # --- Servicio de Base de Datos PostgreSQL ---
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Servicio de Autenticación ---
  auth-service:
    build: ./services/auth-service
    restart: on-failure # <-- CORRECCIÓN AÑADIDA
    env_file:
      - ./.env
    ports:
      - "${AUTH_SERVICE_PORT:-4001}:8080"
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Servicio de Restaurantes ---
  restaurant-service:
    build: ./services/restaurant-service
    restart: on-failure # <-- CORRECCIÓN AÑADIDA
    env_file:
      - ./.env
    ports:
      - "${RESTAURANT_SERVICE_PORT:-4002}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # --- Servicio de Pagos ---
  payment-service:
    build: ./services/payment-service
    restart: on-failure # <-- CORRECCIÓN AÑADIDA
    env_file:
      - ./.env
    ports:
      - "${PAYMENT_SERVICE_PORT:-4003}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # --- Servicio del POS ---
  pos-service:
    build: ./services/pos-service
    restart: on-failure # <-- CORRECCIÓN AÑADIDA
    env_file:
      - ./.env
    ports:
      - "${POS_SERVICE_PORT:-4004}:8080"
    depends_on:
      restaurant-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # --- Servicio del PAC ---
  pac-service:
    build: ./services/pac-service
    restart: on-failure # <-- CORRECCIÓN AÑADIDA
    env_file:
      - ./.env
    ports:
      - "${PAC_SERVICE_PORT:-4005}:8080"
    depends_on:
      restaurant-service:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:8080/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
      
  # --- API Gateway (El único punto de entrada público) ---
  api-gateway:
    build: ./api-gateway
    restart: always # El gateway siempre debe intentar reiniciar
    env_file:
      - ./.env
    ports:
      - "${API_GATEWAY_PORT:-8080}:8080"
    depends_on:
      auth-service:
        condition: service_healthy
      restaurant-service:
        condition: service_healthy
      payment-service:
        condition: service_healthy
      pos-service:
        condition: service_healthy
      pac-service:
        condition: service_healthy

# --- Volúmenes para persistir datos ---
volumes:
  postgres_data:
